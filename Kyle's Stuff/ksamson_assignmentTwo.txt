Kyle Samson
Andrew Berg
C++ Programming III
Spring 2018

--------------------------------
ASSIGNMENT 2
Pages 803-806, Exercises 3-12
Page 811, Programming Exercise 1
--------------------------------

Page 803-806 Exercises #3-12

3)
class animal 
{
public:
	animal();
}

class Dog: public animal
{
public:
	Dog();
}

class Cat: public animal
{
public:
	Cat();
}

class Shibe: public Dog 
{
public:
	Shibe();
}

class Chartreux: public Cat 
{
public:
	Chartreux();
}

_______________


4)
a. circumference, diameter, volume
b.
	class sphereType
	{
	}
c.
	public:
		double circumference;
		double diameter;
		double volume;
		
_______________


5) 
   a. The base class is "runningShoe". The derived class is 
   "shoe".
   b. This is a private inheritance.
   
_______________


6)
   a. The bass class is "twoStory". The derived class is 
      "house".
   b. This is a protected inheritance.
   
_______________


7) The private members of newCylinder is height. newCylinder 
does not inherit the private variables of "circle" unless
those private variables are protected.

_______________


8)

  // class circle definitions //
void circle::setRadius(double)
{
}

void circle::setcenter(double, double)
{
}

void circle::getCenter(double&, double&)
{
}

double circle::getRadius()
{
}

  // class Cylinder definitions //
void cylinder::setHeight(double)
{
}

double cylinder::getHeight()
{
}

The member functions that overrides the member functions of the class circle are: setRadius, setCenter, getCenter and getRadius;

_______________


9)

class hourlyEmployee: public employee
{
public:
	void setData(string n = "", string d = "", int a = 0, double p = 0, double hrsWk = 0, double payRate = 0.0)
	  // Data members are set according to the parameters 
	  // Values assigned to numeric data is nonnegative. 
	
	void setHoursWorked(double hrsWk) const;
	  // Function to set hours worked.
	  // if hrsWk >= 0, hoursWorked = hrsWk;
	  // Otherwise hoursworked = 0;
	
	double getHoursWorked() const;
	  // returns the value of hoursWorked.
	
	void setHourlyPayRate(double payRate)
	  // Function to set hourly pay rate.
	  // if payRate >= 0, hourlyPayRate = payRate;
	  // Otherwise hourlyPayRate = 0;
	
	double getHourlyPayRate(double payRate)
	  // returns the value of hourlyPayRate.
	
	void setpay() const;
	  // Function to set pay.
	  // if hoursworked >= 0, and hourlyPayRate >= 0
	  //	   pay = hoursworked * hourlyPayRate;
	  // Otherwise pay = 0.0;
		hourlyEmployee(string n = "", string d = "", int a = 0, double p = 0, double hrsWk = 0, double payRate = 0.0);
		
private:
	double hoursWorked;
	double hourlyPayRate;
};

_______________


10)

a. 
b. The function setPay overrides the setPay function in hourlyEmployee.
c. 

_______________


11)

a. derived();
b. derivedSet->set();
   derivedGet->get();

_______________


12)
Overriding: A derived class redefines the member function in a base class.
Overloading: The base and derived classes will have functions with the same name, but with different parameters.


Page 811 Exercise #1
1) (see https://github.com/brysonliu/CPP/tree/master/ksamson_clockType)









